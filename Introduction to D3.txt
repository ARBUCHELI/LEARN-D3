# INTRODUCTION TO D3
--------------------
Why D3?
The name d3 comes from the three D’s in the term “Data-Driven Documents.” This JavaScript data-visualization library rose in popularity because of a few game-changing features:

	. d3 revolutionized the way data visualizations are built natively for the web by associating data with elements on a website’s Document Object Model.

	. d3 is a visually elegant library that offers a wide range of pre-packaged visualizations (from Tree-models to Sankey funnels)

	. d3 leaves a lot of room for creative customization because the elements the data are bound to can be styled like any regular DOM element

	. d3 supports interactivity triggered by browser events

In this lesson, we won’t be creating the fanciest d3 visualization you’ve ever seen. We’ll enter the world of d3 by taking our time to understand how data is bound to elements and how to 
customize the appearance of our elements based on this data.

* Instructions
--------------
Observe the image on the right, this was created using D3.

It was published as an interactive article in the NYTimes. Click the link to navigate to their page and see the interactivity for yourself!

Try hovering over each movie director and their edges.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Selection
-----------
D3 “injects” data visualizations onto a web page’s Document Object Model and associates data with a set of selected DOM elements. So before we go too far, let’s understand the first part 
of the process- the selection.

For D3 to inject or bind data to elements, a D3 selection of elements needs to be created. D3 selections are created with the .selectAll() or .select() methods.

Both methods take one CSS3 selector string as their parameter. CSS3 selectors are strings include anything from an HTML element name such as h1 to a class prepended with a ., or an id 
prepended with the # symbol.

	. The .select() method returns the first element that matches a selector string.

	. The .selectAll() returns an array-like structure with grouped nodes for all the elements that match the selector.

Each element in the selection includes a reference to its parent node in the DOM.

Take a look at the following examples:

d3.select('#visualization');
d3.selectAll('div');

	. The .select() element only selects the first element that matches the selector, an element with an id of visualization.

	. The .selectAll() element returns all of the elements that match the div selector in the DOM

Note: To create a selection, the elements do NOT need to exist in the DOM. Say you want to visualize 500 rows of data and associate them with 500 circle elements. Those elements don’t 
need to exist inside your web page in order for d3 to “theoretically” select them. Think of selecting theoretical elements as a “prepping your stage” step. You do this so that you can 
eventually create those elements and bind data to each in the later steps. We will re-visit this concept in later exercises.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s selectAll()of the div elements and display some text. Notice there are three empty <div> elements inside index.html Copy and paste this code inside main.js:

d3.selectAll('div')
  .text('Select All'); 

We will go over the text() method in later steps. For now, take a second to observe that there are now three divs inside the body. What do they display? Can you start inferring what these 
two methods do?

Checkpoint 2 Passed
2.
Now, instead of using selectAll(), let’s use .select(). Paste in the following snippet below the code inside main.js:

d3.select('div')
  .text('Select'); 

What does the first div display and how is it unlike the rest? Notice how only the first div element has changed the text that displays.

index.html
----------
<!DOCTYPE html> 
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
		<script src="https://d3js.org/d3.v5.min.js">		</script>
    <script src="main.js" defer></script>
  </head>

  <body>
    <div id="one">
    </div>
    <div id="two">
    </div>
    <div id="three">
    </div>
	</body>
  
</html>

main.js
-------
d3.selectAll('div')
  .text('Select All'); 

d3.select('div')
  .text('Select'); 

style.css
---------
@import url('https://fonts.googleapis.com/css?family=Raleway');


body{
   font-family: 'Raleway', sans-serif;
   color: #5820df;
}

div {
 padding-left: 10px;
 color: #5820df;
 background: #59eab7;
 border: 4px solid #ee97ef;
 font-size: .8em;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Data-Element Relationship
---------------------------
Now that you’ve selected the elements and understand a bit about selections, let’s insert and associate data per element. You accomplish this with one main method: .data().

The .data() method takes an array of any type as its parameter and binds a datum to each element in the selection returned by .selectAll():

let dataset = [55,34,23,22,59];
d3.selectAll("p")
   .data(dataset);

	. If the n is the length of the dataset passed into .data() and there is an equal or greater number of <p> elements, then every step that follows .data() in the chain is executed 
	n number of times. In the example above, we have five items inside dataset and we assume there are five <p> elements in the HTML. Every instruction that follows the .data() method 
	is therefore executed five times.

	. In this example, we used an array of numbers, but we could have just as easily used an array of complex objects. The .data() function accepts an array of any type.

So is the data associated with the elements or the selection? With the elements! The data is bound to elements as a property, we’ll explore this in later steps. Binding data to the 
elements allows the data to remain associated with the elements on the DOM even after you want to re-use the .selectAll() method to create a new selection.

* Instructions
--------------
Checkpoint 1 Passed
1.
There are 15 div elements inside index.html and the code has created a selection for them inside a variable named divSelection. Bind the videoData by using the .data() method. Note that 
videoData is an array of objects. We’ll explain the .text() portion of this code block in the following exercise:

divSelection
  .data(videoData)
  .text(function(d) {return d});

For now, notice what gets assigned to each <div> is the string representation of the objects inside videoData. We’ll learn how to leverage data in elements in the next exercise. Click 
next when you’re ready!


Hint
d3.select("body")
   .selectAll("div")
   .data(data)
   .text("some string to display");

index.html
----------
Data-Element Relationship
Now that you’ve selected the elements and understand a bit about selections, let’s insert and associate data per element. You accomplish this with one main method: .data().

The .data() method takes an array of any type as its parameter and binds a datum to each element in the selection returned by .selectAll():

let dataset = [55,34,23,22,59];
d3.selectAll("p")
   .data(dataset);

If the n is the length of the dataset passed into .data() and there is an equal or greater number of <p> elements, then every step that follows .data() in the chain is executed n number of times. In the example above, we have five items inside dataset and we assume there are five <p> elements in the HTML. Every instruction that follows the .data() method is therefore executed five times.
In this example, we used an array of numbers, but we could have just as easily used an array of complex objects. The .data() function accepts an array of any type.
So is the data associated with the elements or the selection? With the elements! The data is bound to elements as a property, we’ll explore this in later steps. Binding data to the elements allows the data to remain associated with the elements on the DOM even after you want to re-use the .selectAll() method to create a new selection.

Instructions
Checkpoint 1 Passed
1.
There are 15 div elements inside index.html and the code has created a selection for them inside a variable named divSelection. Bind the videoData by using the .data() method. Note that videoData is an array of objects. We’ll explain the .text() portion of this code block in the following exercise:

divSelection
  .data(videoData)
  .text(function(d) {return d});

For now, notice what gets assigned to each <div> is the string representation of the objects inside videoData. We’ll learn how to leverage data in elements in the next exercise. Click next when you’re ready!


Hint
d3.select("body")
   .selectAll("div")
   .data(data)
   .text("some string to display");

style.css
---------
@import url('https://fonts.googleapis.com/css?family=Raleway');


body{
   font-family: 'Raleway', sans-serif;
   color: #5820df;
}

h3 {
  text-align: center;
}

div {
 padding-left: 10px;
 color: #5820df;
 background: #59eab7;
 border: 4px solid #ee97ef;
 font-size: .8em;
  height: 10px;
}

main.js
-------
let videoData = [{title: "Despacito", amount: 5.68},
         {title: "Shape of You", amount: 3.89},
         {title: "See You Again", amount: 3.85},
         {title: "Uptown Funk", amount: 3.32},
         {title: "Masha and the Bear: Recipe for Disaster", amount: 3.31},
         {title: "Gangam Style", amount: 3.23},
         {title: "Sorry", amount: 3.03},
         {title: "Sugar", amount: 2.80},
         {title: "Shake it Off", amount: 2.67},
         {title: "Roar", amount: 2.65},
         {title: "Bailando", amount: 2.63},
         {title: "Thinking Out Loud", amount: 2.53},
         {title: "Counting Stars", amount: 2.51},
         {title: "Dark Horse", amount: 2.46},
         {title: "Lean On", amount: 2.43}
 ];

let divSelection = d3.select("body") 
  .selectAll("div");

//Add your code here:
divSelection
  .data(videoData)
  .text(function(d) {return d});

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The d Parameter
-----------------
So once we’ve associated the data with the elements, how do we access the data and start manipulating our elements based on those values? You’ll need a function with a d param to access 
each datum associated per element. Think of the d as representing the d in data or datum. Remember that the steps that follow .data() method are executed the total number of elements in 
the dataset.

In the previous exercise, you pasted an anonymous function with a d parameter. This is because the d parameter represents the value bound to each element in the d3 chain. Say we wanted to 
change the text inside a div to display the numbers in the array as text:

let dataset = [55,34,23,22,59];

let svg = d3.select("body")
                 .selectAll("div")
                 .data(dataset)
                 .text(function(d) {
                         return d;
                  });

	. In this example, the .text() method took an anonymous function with a d parameter that returns the data value inside each of the div elements. d3 will append that value as the 
	text inside each of the five div elements it created from the dataset array. Note: If the data were of type object, it would append the entire object and we could access each of 
	their properties accordingly.

	. The .data() method assigns the correct value to the d parameter, or the first parameter, for the elements in question.

	. The functions you use don’t always need to be anonymous, but you do need to include a d parameter, or a first argument, if you want to access the data. You can also optionally 
	include an i parameter, or second parameter, if you want to access the index. Your JavaScript functions can be named and as complex as you wish, but for clarity’s sake, we used an 
	anonymous one that simply returns the d value in this example. If we wanted to introduce more complicated logic like conditionals, a loop, or append other text, we could achieve 
	this just like we would in the body of any other function.

* Instructions
--------------
Checkpoint 1 Passed
1.
The values inside of videoData array are objects. Use the .text() method and pass in an anonymous function that uses the d parameter to return the d.title and d.amount formatted as a 
string like:

d.title + ": " + d.amount + " views"

Click Run and observe the output. Congrats! You were able to customize your data-driven elements based on data bound to them. We’ll keep building on this knowledge.


Hint
d3.select("body")
   .selectAll("div")
   .data(data)
   .text("some string to display");

index.html
----------
<!DOCTYPE html> 
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
		<script src="https://d3js.org/d3.v5.min.js">		</script>
    <script src="main.js" defer></script>
  </head>

  <body>
    <h3>Most Streamed YouTube Videos in Billions:</h3>
	</body>
  
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>  
</html>

main.js
-------
let videoData = [{title: "Despacito", amount: 5.68},
         {title: "Shape of You", amount: 3.89},
         {title: "See You Again", amount: 3.85},
         {title: "Uptown Funk", amount: 3.32},
         {title: "Masha and the Bear: Recipe for Disaster", amount: 3.31},
         {title: "Gangam Style", amount: 3.23},
         {title: "Sorry", amount: 3.03},
         {title: "Sugar", amount: 2.80},
         {title: "Shake it Off", amount: 2.67},
         {title: "Roar", amount: 2.65},
         {title: "Bailando", amount: 2.63},
         {title: "Thinking Out Loud", amount: 2.53},
         {title: "Counting Stars", amount: 2.51},
         {title: "Dark Horse", amount: 2.46},
         {title: "Lean On", amount: 2.43}
 ];

let divSelection = d3.select("body") 
  .selectAll("div");

 divSelection
  .data(videoData)
  .text(function(d) {return d.title + ": " + d.amount + " views"}); 

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Styling your data
-------------------
Now that you know how to access the datum associated with each element, it’s possible to start customizing the appearance of each element with two powerful methods: .attr() and .style().

	. The .attr() method takes two parameters, the HTML attribute you wish to change and the value you wish to assign it.

	. Similarly, the .style() method takes two parameters, the CSS property you wish to change and the value you wish to assign it.

As we saw in the previous exercise, both of these methods can take their second argument as a function that returns the desired value for the property or attribute.

Let’s take a look to build on the example we’ve seen throughout the lesson:

let dataset = [55,34,23,22,59];

let svg = d3.select("body")
            .selectAll("div")
            .data(dataset)
            .attr("id", function(d,i){ return "element-" + i; })
            .style("width", function(d){
                   return d + "px";
            });

Focusing on the last four lines of the example above, observe that both .attr() and .style() levereged an anonymous function with the d parameter to set the values based on the element 
data.

	. The .attr() method changed the HTML attribute id to be based on the element index in the dataset

	. The .style() method computed the width to be a function of the datum value

You can style your elements according to the value of their data and change the styling based on different conditions.

* Instructions
--------------
Checkpoint 1 Passed
1.
Use the .attr() method to assign a class of "bar" to all of the div elements in the d3 chain. All of the elements in this selection will now be styled with the same class. Click “Run” and 
observe what styles applied.


Hint
 selection
  .attr("class", "class-name");

Checkpoint 2 Passed
2.
It’s great to apply a class for shared common styles, but what about the styles that depend on the value of the data of each element? Customize the width of each div by using the .style() 
method. Use an anonymous function to compute the width in pixels to be:

d.amount * 50 + "px"

Click “Run” and observe the width of each div element reflect the number of views per YouTube video. That’s what we call data-driven styling!


Hint
 selection
  .style("width", function(d) { return d + "px"; });


index.html
----------
<!DOCTYPE html> 
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
		<script src="https://d3js.org/d3.v5.min.js">		</script>
    <script src="main.js" defer></script>
  </head>

  <body>
    <h3>Most Streamed YouTube Videos in Billions:</h3>
	</body>
  
  
    
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div> 
</html>

main.js
-------
let videoData = [{title: "Despacito", amount: 5.68},
         {title: "Shape of You", amount: 3.89},
         {title: "See You Again", amount: 3.85},
         {title: "Uptown Funk", amount: 3.32},
         {title: "Masha and the Bear: Recipe for Disaster", amount: 3.31},
         {title: "Gangam Style", amount: 3.23},
         {title: "Sorry", amount: 3.03},
         {title: "Sugar", amount: 2.80},
         {title: "Shake it Off", amount: 2.67},
         {title: "Roar", amount: 2.65},
         {title: "Bailando", amount: 2.63},
         {title: "Thinking Out Loud", amount: 2.53},
         {title: "Counting Stars", amount: 2.51},
         {title: "Dark Horse", amount: 2.46},
         {title: "Lean On", amount: 2.43}
 ];

let divSelection = d3.select("body") 
  .selectAll("div");

divSelection
  .data(videoData)
  .text(function(d) { 
     return d.title + ": " + d.amount + " views";
	 })
   .attr("class", "bar")
   .style("width", function(d){
      return d.amount * 50 + "px"
   });

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Enter and Append
------------------
So far, our code has been associating data with existing elements inside our index.html file. What would happen if those elements weren’t already in there? We previously mentioned the 
idea of “hypothetically” selecting elements so that we could prep them to bind data. How do we turn theoretical elements into real ones to visualize with data? With the .enter() and 
.append() methods!

But first, a quick refresher on the .data() method. The .data() method is invoked on a selection and takes a parameter of an array of any type. It returns an update selection with the 
data bound to the elements. This update selection works as the object invoked on the next step:

	. The .enter() method consolidates the difference between the number of existing elements in the selection and the number of elements in the dataset. It is invoked on the update 
	selection that .data() returns. If there are more data points than existing “selected” elements, .enter() creates placeholder elements and returns an enter selection which 
	specifies which elements need to be added. For example, if there were 0 existing elements in the update selection and 10 data points, enter would compute 10 elements in the enter 
	selection. If there were 3, then it would compute 7 in the enter selection. The .enter() method does not actually append the elements, it just computes how many need to be added.

	. Lastly the .append("element") method takes a string parameter with the element name you wish to append, it then analyzes the selection that gets handed off to it, and generates 
	the specified elements on the DOM. It returns a reference to the elements it created.

Note: If you ever want to analyze the data in the selection and log it to the console, you can always use the .nodes() method on your selection. This method will log the array of grouped 
nodes in the selection.

After making a selection, creating a new visualization, whose elements are not already in the DOM, usually follows the .data() .enter() and .append() pattern:

let dataset = [55,34,23,22,59];
d3.select("body")
   .selectAll("div")
   .data(dataset)
   .enter()
   .append("div");

	. Everything after .data() will therefore get executed five times

	. The .enter() method created five placeholder elements because there were no div elements in the DOM

	. Five div’s were appended with the div elements
	
	. Those divs each have a _data_ property with the values of 55, 34, 2, 22, 59, respectively

	. Each step of the chain returned a reference to those elements.

* Instructions
--------------
Checkpoint 1 Passed
1.
Notice that in this exercise, there are no div elements inside index.html. We will be adding those elements with .enter() and .append().

After the .data() method, add the two methods and pass in the string 'div' to the .append() method so that it may generate the div belonging to every datum in the dataset. Be sure to add 
these steps in the chain right after .data() but before .text(). Take a second to note .enter() will compute the fifteen elements, and .append() will insert them.

main.js
-------
let videoData = [{title: "Despacito", amount: 5.68},
         {title: "Shape of You", amount: 3.89},
         {title: "See You Again", amount: 3.85},
         {title: "Uptown Funk", amount: 3.32},
         {title: "Masha and the Bear: Recipe for Disaster", amount: 3.31},
         {title: "Gangam Style", amount: 3.23},
         {title: "Sorry", amount: 3.03},
         {title: "Sugar", amount: 2.80},
         {title: "Shake it Off", amount: 2.67},
         {title: "Roar", amount: 2.65},
         {title: "Bailando", amount: 2.63},
         {title: "Thinking Out Loud", amount: 2.53},
         {title: "Counting Stars", amount: 2.51},
         {title: "Dark Horse", amount: 2.46},
         {title: "Lean On", amount: 2.43}
 ];

let divSelection = d3.select("body") 
  .selectAll("div");

divSelection
  .data(videoData)
  .enter()
  .append("div")
  .text(function(d) { 
     return d.title + ": " + d.amount + " views";
	 })
  .attr("class", "bar")
  .style("width", function(d) { return 50 * d.amount + "px"; });

index.html
----------
<!DOCTYPE html> 
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
		<script src="https://d3js.org/d3.v5.min.js">		</script>
    <script src="main.js" defer></script>
  </head>

  <body>
    <h3>Most Streamed YouTube Videos in Billions:</h3>
	</body>
</html>

style.css
---------
@import url('https://fonts.googleapis.com/css?family=Raleway');


body{
   font-family: 'Raleway', sans-serif;
   color: #5820df;
}

h3 {
  text-align: center;
}

div {
 padding-left: 10px;
 color: #5820df;
 background: #59eab7;
 border: 4px solid #ee97ef;
 font-size: .8em;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Chaining and Returning
------------------------
Before we wrap up, let’s take a second to analyze the chaining syntax that is a D3 signature.

In the previous exercise, we referenced the following code:

let dataset = [55,34,23,22,59];

d3.select("body")
 .selectAll("div")
   .data(dataset)
   .enter()
 .append("div")
   .text("Some text");

At first, this style may just seem like one big chain! But the key takeaway is that the methods that precede others in the chain return what is needed for the next step in the chain. By 
chaining, you can save some lines of code in your program.

You’ll see that the d3 community will indent some parts of the chains with four spaces, and other parts of the chain with two. The lines with two spaces indicate that the selection has 
changed:

var h1 = d3.selectAll("section")
    .style("background", "steelblue")
  .append("h1")
    .text("Hello!");

* Instructions
--------------
Checkpoint 1 Passed
1.
Indent the .append() method, to indicate changes to the selection from the inserted div elements, by only indenting that line two spaces and not four.


Hint
let dataset = [55,34,23,22,59];

d3.select("body")
 .selectAll("div")
   .data(dataset)
   .enter()
 .append("div")
   .text("Some text");

index.html
----------
<!DOCTYPE html> 
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
		<script src="https://d3js.org/d3.v5.min.js">		</script>
    <script src="main.js" defer></script>
  </head>

  <body>
    <h1>Most Streamed YouTube Videos in Billions:</h1>
	</body>
 
</html>

main.js
-------
let videoData = [{title: "Despacito", amount: 5.68},
         {title: "Shape of You", amount: 3.89},
         {title: "See You Again", amount: 3.85},
         {title: "Uptown Funk", amount: 3.32},
         {title: "Masha and the Bear: Recipe for Disaster", amount: 3.31},
         {title: "Gangam Style", amount: 3.23},
         {title: "Sorry", amount: 3.03},
         {title: "Sugar", amount: 2.80},
         {title: "Shake it Off", amount: 2.67},
         {title: "Roar", amount: 2.65},
         {title: "Bailando", amount: 2.63},
         {title: "Thinking Out Loud", amount: 2.53},
         {title: "Counting Stars", amount: 2.51},
         {title: "Dark Horse", amount: 2.46},
         {title: "Lean On", amount: 2.43}
 ];

let divSelection = d3.select("body") 
    .selectAll("div");

 divSelection
    .data(videoData)
    .enter()
  .append('div')
    .text(function(d) { 
       return d.title + ": " + d.amount + " views";
	  })
    .attr("class", "bar")
    .style("width", function(d) { return d.amount * 50 + "px"; });

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Interactivity with events
---------------------------
You’ve learned the basic d3 design pattern of:

	. Creating a selection

	. Associating data with that selection
	
	. Appending elements to the DOM

	. Modifying the elements based on the data

Let’s take a second to put it all together, and build some interactivity on top. After all, another powerful aspect of d3 is that it has access to DOM events.

The .on() method takes a string parameter with the name of the event and a function to handle that event when it is triggered. The .on() method binds an event listener to the elements in 
the selection. Take a look at the following example:

selection
    .on("mouseover", function(d,i) {
          d3.select(this).text(d);
    });

In the code above, each element in the selection would have an event listener that binds text to the elements when they event is triggered on each element individually. Notice that in the 
body of the function, we use the this keyword. In the function’s context, this refers to the event’s DOM element. The code modifies the text on mouse over, by selecting it with d3 and 
appending new text.

You can pass different types of events, some of the most popular events include "click", "mouseover", "mouseout", "mouseenter" and more.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s put all of our knowledge together:

	. Create a selection variable that creates a selection by first selecting the #viz element and then selecting all p elements.

	. Bind the poemVerses array to it as the .data()
	
	. Since there are no paragraphs inside the #viz element in our index.html we need to create them, use .enter() and .append() to calculate the number of elements that need to be 
	added to selection and to add the p elements. Add a simple string of .text() to each element that says “Click Me!”. We’ll make this part interactive in the next step.

Hint
selection
  .data(dataset)
  .enter()
  .append("element")
  .text("some simple text to display")

Checkpoint 2 Passed
2.
You’ve mastered the pattern of creating a selection, binding data, and appending elements. Let’s use the .on() method to add an event listener that gets triggered on "click" for each of 
those elements:

	. Pass in the string "click" as your first parameter.

	. The second parameter should be an event handler function. Inside the event handler function you create, use d3.select() to grab the element the event is triggered on by using 
	the keyword this. Chain this selection to assign the element a .text() that corresponds to datum value for each element.

Press save and click on each element!


Hint
selection
  .data(dataset)
  .enter()
  .append("element")
  .text("some simple text to display")
  .on("mouseover", function(d, i) {d3.select(this).text(d); });

index.html
----------
<!DOCTYPE html> 
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
		<script src="https://d3js.org/d3.v5.min.js">		</script>
    <script src="main.js" defer></script>
  </head>

  <body>
    <h3>Love, Maybe by Audre Lorde</h3>
    <div id="viz"></div>     
	</body>
  
</html>

main.js
-------
let poemVerses = ["Always","in the middle", "of our bloodiest battles", "you lay down your arms","like flowering mines","to conquer me home."];

let selection = d3.select("#viz") 
    .selectAll("p");

selection
  .data(poemVerses)
  .enter()
  .append("p")
  .text("Click Me!")
  .on("click", function(d,i) {
          d3.select(this).text(d);
    });

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Review
--------
Congrats on completing your first d3 visualization! With these basic skills, you can start building more complex visualizations by using some of the D3 pre-packaged methods. There are 
plenty of visualizations you can leverage now that you understand the mechanisms of how elements are added to the DOM and data is associated with them:

	. Selections are array-like data structures that include a reference to the elements with D3 methods and their hierarchy in the DOM. You can create a selection with .selectAll() 
	or a single-item selection with .select()

	. The .data(), .enter() and .append() methods all work in unison to create elements and associate their corresponding data with the existing DOM

	. The d parameter inside functions used in a D3 context represents the datum associated with the element at hand
	
	. The .attr() and .style() methods allow you to customize the appearance of each element based on data.

	. The .on() method can bind an event listener on the elements in the selection.

* Instructions
--------------
Feel free to play around with your newfound knowledge in the code editor and complete the lesson when you’re ready!


































































































































































































