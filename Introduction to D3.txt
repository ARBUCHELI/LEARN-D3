# INTRODUCTION TO D3
--------------------
Why D3?
The name d3 comes from the three D’s in the term “Data-Driven Documents.” This JavaScript data-visualization library rose in popularity because of a few game-changing features:

	. d3 revolutionized the way data visualizations are built natively for the web by associating data with elements on a website’s Document Object Model.

	. d3 is a visually elegant library that offers a wide range of pre-packaged visualizations (from Tree-models to Sankey funnels)

	. d3 leaves a lot of room for creative customization because the elements the data are bound to can be styled like any regular DOM element

	. d3 supports interactivity triggered by browser events

In this lesson, we won’t be creating the fanciest d3 visualization you’ve ever seen. We’ll enter the world of d3 by taking our time to understand how data is bound to elements and how to 
customize the appearance of our elements based on this data.

* Instructions
--------------
Observe the image on the right, this was created using D3.

It was published as an interactive article in the NYTimes. Click the link to navigate to their page and see the interactivity for yourself!

Try hovering over each movie director and their edges.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Selection
-----------
D3 “injects” data visualizations onto a web page’s Document Object Model and associates data with a set of selected DOM elements. So before we go too far, let’s understand the first part 
of the process- the selection.

For D3 to inject or bind data to elements, a D3 selection of elements needs to be created. D3 selections are created with the .selectAll() or .select() methods.

Both methods take one CSS3 selector string as their parameter. CSS3 selectors are strings include anything from an HTML element name such as h1 to a class prepended with a ., or an id 
prepended with the # symbol.

	. The .select() method returns the first element that matches a selector string.

	. The .selectAll() returns an array-like structure with grouped nodes for all the elements that match the selector.

Each element in the selection includes a reference to its parent node in the DOM.

Take a look at the following examples:

d3.select('#visualization');
d3.selectAll('div');

	. The .select() element only selects the first element that matches the selector, an element with an id of visualization.

	. The .selectAll() element returns all of the elements that match the div selector in the DOM

Note: To create a selection, the elements do NOT need to exist in the DOM. Say you want to visualize 500 rows of data and associate them with 500 circle elements. Those elements don’t 
need to exist inside your web page in order for d3 to “theoretically” select them. Think of selecting theoretical elements as a “prepping your stage” step. You do this so that you can 
eventually create those elements and bind data to each in the later steps. We will re-visit this concept in later exercises.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s selectAll()of the div elements and display some text. Notice there are three empty <div> elements inside index.html Copy and paste this code inside main.js:

d3.selectAll('div')
  .text('Select All'); 

We will go over the text() method in later steps. For now, take a second to observe that there are now three divs inside the body. What do they display? Can you start inferring what these 
two methods do?

Checkpoint 2 Passed
2.
Now, instead of using selectAll(), let’s use .select(). Paste in the following snippet below the code inside main.js:

d3.select('div')
  .text('Select'); 

What does the first div display and how is it unlike the rest? Notice how only the first div element has changed the text that displays.

index.html
----------
<!DOCTYPE html> 
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
		<script src="https://d3js.org/d3.v5.min.js">		</script>
    <script src="main.js" defer></script>
  </head>

  <body>
    <div id="one">
    </div>
    <div id="two">
    </div>
    <div id="three">
    </div>
	</body>
  
</html>

main.js
-------
d3.selectAll('div')
  .text('Select All'); 

d3.select('div')
  .text('Select'); 

style.css
---------
@import url('https://fonts.googleapis.com/css?family=Raleway');


body{
   font-family: 'Raleway', sans-serif;
   color: #5820df;
}

div {
 padding-left: 10px;
 color: #5820df;
 background: #59eab7;
 border: 4px solid #ee97ef;
 font-size: .8em;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Data-Element Relationship
---------------------------
Now that you’ve selected the elements and understand a bit about selections, let’s insert and associate data per element. You accomplish this with one main method: .data().

The .data() method takes an array of any type as its parameter and binds a datum to each element in the selection returned by .selectAll():

let dataset = [55,34,23,22,59];
d3.selectAll("p")
   .data(dataset);

	. If the n is the length of the dataset passed into .data() and there is an equal or greater number of <p> elements, then every step that follows .data() in the chain is executed 
	n number of times. In the example above, we have five items inside dataset and we assume there are five <p> elements in the HTML. Every instruction that follows the .data() method 
	is therefore executed five times.

	. In this example, we used an array of numbers, but we could have just as easily used an array of complex objects. The .data() function accepts an array of any type.

So is the data associated with the elements or the selection? With the elements! The data is bound to elements as a property, we’ll explore this in later steps. Binding data to the 
elements allows the data to remain associated with the elements on the DOM even after you want to re-use the .selectAll() method to create a new selection.

* Instructions
--------------
Checkpoint 1 Passed
1.
There are 15 div elements inside index.html and the code has created a selection for them inside a variable named divSelection. Bind the videoData by using the .data() method. Note that 
videoData is an array of objects. We’ll explain the .text() portion of this code block in the following exercise:

divSelection
  .data(videoData)
  .text(function(d) {return d});

For now, notice what gets assigned to each <div> is the string representation of the objects inside videoData. We’ll learn how to leverage data in elements in the next exercise. Click 
next when you’re ready!


Hint
d3.select("body")
   .selectAll("div")
   .data(data)
   .text("some string to display");

index.html
----------
Data-Element Relationship
Now that you’ve selected the elements and understand a bit about selections, let’s insert and associate data per element. You accomplish this with one main method: .data().

The .data() method takes an array of any type as its parameter and binds a datum to each element in the selection returned by .selectAll():

let dataset = [55,34,23,22,59];
d3.selectAll("p")
   .data(dataset);

If the n is the length of the dataset passed into .data() and there is an equal or greater number of <p> elements, then every step that follows .data() in the chain is executed n number of times. In the example above, we have five items inside dataset and we assume there are five <p> elements in the HTML. Every instruction that follows the .data() method is therefore executed five times.
In this example, we used an array of numbers, but we could have just as easily used an array of complex objects. The .data() function accepts an array of any type.
So is the data associated with the elements or the selection? With the elements! The data is bound to elements as a property, we’ll explore this in later steps. Binding data to the elements allows the data to remain associated with the elements on the DOM even after you want to re-use the .selectAll() method to create a new selection.

Instructions
Checkpoint 1 Passed
1.
There are 15 div elements inside index.html and the code has created a selection for them inside a variable named divSelection. Bind the videoData by using the .data() method. Note that videoData is an array of objects. We’ll explain the .text() portion of this code block in the following exercise:

divSelection
  .data(videoData)
  .text(function(d) {return d});

For now, notice what gets assigned to each <div> is the string representation of the objects inside videoData. We’ll learn how to leverage data in elements in the next exercise. Click next when you’re ready!


Hint
d3.select("body")
   .selectAll("div")
   .data(data)
   .text("some string to display");

style.css
---------
@import url('https://fonts.googleapis.com/css?family=Raleway');


body{
   font-family: 'Raleway', sans-serif;
   color: #5820df;
}

h3 {
  text-align: center;
}

div {
 padding-left: 10px;
 color: #5820df;
 background: #59eab7;
 border: 4px solid #ee97ef;
 font-size: .8em;
  height: 10px;
}

main.js
-------
let videoData = [{title: "Despacito", amount: 5.68},
         {title: "Shape of You", amount: 3.89},
         {title: "See You Again", amount: 3.85},
         {title: "Uptown Funk", amount: 3.32},
         {title: "Masha and the Bear: Recipe for Disaster", amount: 3.31},
         {title: "Gangam Style", amount: 3.23},
         {title: "Sorry", amount: 3.03},
         {title: "Sugar", amount: 2.80},
         {title: "Shake it Off", amount: 2.67},
         {title: "Roar", amount: 2.65},
         {title: "Bailando", amount: 2.63},
         {title: "Thinking Out Loud", amount: 2.53},
         {title: "Counting Stars", amount: 2.51},
         {title: "Dark Horse", amount: 2.46},
         {title: "Lean On", amount: 2.43}
 ];

let divSelection = d3.select("body") 
  .selectAll("div");

//Add your code here:
divSelection
  .data(videoData)
  .text(function(d) {return d});

------------------------------------------------------------------------------------------------------------------------------------------------------------------





















































